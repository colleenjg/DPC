#!/bin/bash
#SBATCH --partition=main
#SBATCH --cpus-per-task=1
#SBATCH --gres=gpu:1
#SBATCH --mem=10G
#SBATCH --array=0-4
#SBATCH --time=4:00:00
#SBATCH --output=/home/mila/g/gillonco/scratch/traineddpc_%A_%a.txt

# if $TEST is 1, runs 4 min

# 1. Set directory in which to save results (also update output directory above)
SAVE_DIR=/home/mila/g/gillonco/scratch

if [[ ! -d $SAVE_DIR ]]; then
    echo -e "Save directory '$SAVE_DIR' does not exist. Please set SAVE_DIR to the path of an existing directory."
    exit 1
fi


# 2. Load modules
module purge
module load anaconda/3
module load cuda/10.2/cudnn/7.6

conda activate ssl


# 2. Copy pre-trained model weights (downloaded from DPC repo) from source directory (SAVE_DIR) to SLURM_TMPDIR 
cp $SAVE_DIR/pretrained/k400_128_r18_dpc-rnn.pth.tar $SLURM_TMPDIR/

echo 'Copied pre-trained model to slurm temporary directory.'


# 3. Set fixed hyperparameters
SE=5
N_SEQ=4
U_PROB=0.1

LOCAL_DIR=$SAVE_DIR/test_gabors/pretrained_noblanks_numseq$N_SEQ\_Elast_bothED_batch10


# 4. Identify seeds to run through
if [ $SLURM_ARRAY_TASK_ID == 0 ]; then
    SEEDS=($( seq 2 1 6 ))
elif [ $SLURM_ARRAY_TASK_ID == 1 ]; then
    SEEDS=($( seq 7 1 12 ))
elif [ $SLURM_ARRAY_TASK_ID == 2 ]; then
    SEEDS=($( seq 13 1 18 ))
elif [ $SLURM_ARRAY_TASK_ID == 3 ]; then
    SEEDS=($( seq 19 1 24 ))
elif [ $SLURM_ARRAY_TASK_ID == 4 ]; then
    SEEDS=($( seq 25 1 30 ))
fi


# 5. Run through a few seeds
EXIT=0
CODE_DIR=$PWD # current directory

for SEED in "${SEEDS[@]}"
do
    # Results are saved in $SLURM_TMPDIR
    cd $CODE_DIR/dpc

    set -x # echo commands to console
    
    python test_gabors.py \
        --save_dir $SLURM_TMPDIR \
        --pretrain $SLURM_TMPDIR/k400_128_r18_dpc-rnn.pth.tar \
        --gpu 0 \
        --net resnet18 \
        --dataset gabors \
        --batch_size 10 \
        --img_dim 128 \
        --train_what ft \
        --epochs 25 \
        --unexpected_epoch 5 \
        --pred_step 1 \
        --print_freq 1 \
        --roll 'True' \
        --seq_len $SE \
        --num_seq $N_SEQ \
        --U_prob $U_PROB \
        --seed $SEED \

    code="$?"
    if [ "$code" -gt "$EXIT" ]; then EXIT="$code"; fi # collect exit code

    set +x # stop echoing commands to console

    # Copy results to SAVE_DIR
    cd $SLURM_TMPDIR
    find . -type f -name "*.json" | cpio -pdm $LOCAL_DIR
    cp -r log* $LOCAL_DIR

    code="$?"
    if [ "$code" -gt "$EXIT" ]; then EXIT="$code"; fi # collect exit code

    if [[ $TEST == 1 ]]; then # only run 1 iteration
        break
    fi

done

if [ "$EXIT" -ne 0 ]; then exit "$EXIT"; fi # exit with highest exit code
